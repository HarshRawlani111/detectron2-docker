# -*- coding: utf-8 -*-
"""jan27_detectron2_docker_v01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SXe3urgpEjtIF0gLvnOHxU7hSnLLA7t0
"""





#Making a Directory

import os

directory = "jan27_detectron2_docker"
parent_dir = "/content/drive/MyDrive/"

work_dir = os.path.join(parent_dir, directory)
os.mkdir(work_dir)
print("working directory '%s'created" %directory)

os.chdir(work_dir)
print('directory changed to ',os.getcwd())

#CMD Line command which can be later executed as part of requirements.txt

#!python -m pip install pyyaml==5.1

# Commented out IPython magic to ensure Python compatibility.
#CMD Line command which can be later executed as part of requirements.tx
#below command is from :https://bobbyhadz.com/blog/python-no-module-named-git
# %pip install GitPython

#Cloning Detectron2 repo

# Note: This is a faster way to install detectron2 in Colab, but it does not include all functionalities.
# See https://detectron2.readthedocs.io/tutorials/install.html for full installation instructions
import sys, os, distutils.core, git
git.Git("detectron2").clone("https://github.com/facebookresearch/detectron2")

#!git clone 'https://github.com/facebookresearch/detectron2'
dist = distutils.core.run_setup("./detectron2/setup.py")

#CMD Line command which can be later executed as part of requirements.txt

#!python -m pip install {' '.join([f"'{x}'" for x in dist.install_requires])}

sys.path.insert(0, os.path.abspath('./detectron2'))

#Checking CUDA version
import torch, detectron2
#!nvcc --version
TORCH_VERSION = ".".join(torch.__version__.split(".")[:2])
CUDA_VERSION = torch.__version__.split("+")[-1]
print("torch: ", TORCH_VERSION, "; cuda: ", CUDA_VERSION)
print("detectron2:", detectron2.__version__)

#Imp Libs

# Some basic setup:
# Setup detectron2 logger
import detectron2
from detectron2.utils.logger import setup_logger
setup_logger()

# import some common libraries
import numpy as np
import os, json, cv2, random
from google.colab.patches import cv2_imshow

# import some common detectron2 utilities
from detectron2 import model_zoo
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog, DatasetCatalog

pwd

#converting XML to JSON
#!python voc2coco.py train_annotations  output.json

#creating experiement
from detectron2.data.datasets import register_coco_instances
register_coco_instances("train2", {}, "./output.json", "./train") 
#resigering our experiment which would come with annoation = output.json, train images = ./train. so that it can be used multiple times
sample_metadata = MetadataCatalog.get("train2") #takes care of annotation files for our expt 'customtrain1'
dataset_dicts = DatasetCatalog.get("train2") # takes care of images for our expt 'customtrain1'
#going forward we have to just pass the name of the expt and annotation file, dataset will be automaitcally detected

#starting training

from detectron2.engine import DefaultTrainer #starting training

cfg = get_cfg()
cfg.merge_from_file(model_zoo.get_config_file("COCO-Detection/faster_rcnn_R_50_FPN_3x.yaml"))
cfg.DATASETS.TRAIN = ("train2",)
cfg.DATASETS.TEST = () #test data is not being used 
cfg.DATALOADER.NUM_WORKERS = 2
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-Detection/faster_rcnn_R_50_FPN_3x.yaml")  # Let training initialize from model zoo
cfg.SOLVER.IMS_PER_BATCH = 2
cfg.SOLVER.BASE_LR = 0.0025  # pick a good LR
cfg.SOLVER.MAX_ITER = 300    # 300 iterations seems good enough for this toy dataset; you will need to train longer for a practical dataset
cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 128   # faster, and good enough for this toy dataset (default: 512)
cfg.MODEL.ROI_HEADS.NUM_CLASSES = 6  # (see https://detectron2.readthedocs.io/tutorials/datasets.html#update-the-config-for-new-datasets)
# NOTE: this config means the number of classes, but a few popular unofficial tutorials incorrect uses num_classes+1 here.

os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)
trainer = DefaultTrainer(cfg) 
trainer.resume_or_load(resume=True)
trainer.train()

#Making Inference

cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, "model_final.pth")
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.4   # set the testing threshold for this model
cfg.DATASETS.TEST = ("train2", )
predictor = DefaultPredictor(cfg)

#visualzing predictions on few images
from detectron2.utils.visualizer import ColorMode
#dataset_dicts = get_balloon_dicts("train")
dataset_dicts = DatasetCatalog.get("train2")
for d in random.sample(dataset_dicts, 3):    
    im = cv2.imread(d["file_name"])
    outputs = predictor(im)  # format is documented at https://detectron2.readthedocs.io/tutorials/models.html#model-output-format
    v = Visualizer(im[:, :, ::-1],
                   metadata=sample_metadata, 
                   scale=0.5, 
                   instance_mode=ColorMode.IMAGE_BW   # remove the colors of unsegmented pixels. This option is only available for segmentation models
    )
    out = v.draw_instance_predictions(outputs["instances"].to("cpu"))
    cv2_imshow(out.get_image()[:, :, ::-1])

#Evaluating the model

from detectron2.evaluation import COCOEvaluator, inference_on_dataset
from detectron2.data import build_detection_test_loader
evaluator = COCOEvaluator("train2", output_dir="./output")
val_loader = build_detection_test_loader(cfg, "train2")
print(inference_on_dataset(predictor.model, val_loader, evaluator))
# another equivalent way to evaluate the model is to use `trainer.test

# Commented out IPython magic to ensure Python compatibility.
#CMDLine command.
#Saving the requirments.txt
# install
# %pip install pipreqs

# Run in current directory
#!python3 -m  pipreqs.pipreqs

